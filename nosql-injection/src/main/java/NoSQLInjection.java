import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.util.JSON;
import de.flapdoodle.embed.mongo.MongodExecutable;
import de.flapdoodle.embed.mongo.MongodProcess;
import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.config.IMongodConfig;
import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;
import de.flapdoodle.embed.mongo.distribution.Version;
import de.flapdoodle.embed.process.runtime.Network;

import java.net.UnknownHostException;
import java.util.Scanner;

/**
 * @author Andreas Dann
 * created on 21.02.19
 */
public class NoSQLInjection {


    public static void main(String[] args) throws Exception {

        // start the mongodb

        MongodStarter starter = MongodStarter.getDefaultInstance();
        String bindIp = "localhost";
        int port = 12345;
        IMongodConfig mongodConfig = new MongodConfigBuilder()
                .version(Version.Main.PRODUCTION)
                .net(new Net(bindIp, port, Network.localhostIsIPv6()))
                .build();

        MongodExecutable mongodExecutable = null;
        try {
            mongodExecutable = starter.prepare(mongodConfig);
            MongodProcess mongod = mongodExecutable.start();

            // More details at http://docs.mongodb.org/ecosystem/tutorial/getting-started-with-java-driver/
            MongoClient mongoClient = new MongoClient(bindIp, port);

            DB gameOfThronesDatabase = mongoClient.getDB("loginCredentials");
            gameOfThronesDatabase.dropDatabase();

            DBCollection characters = gameOfThronesDatabase.getCollection("users");
            NoSQLInjection.seedDB(characters);


            System.out.flush();


            System.out.print("Enter username: ");
            Scanner scanner = new Scanner(System.in);
            String user = scanner.nextLine().trim();
            System.out.print("Enter password: ");
            String password = scanner.nextLine().trim();

            //Try to authenticate
            System.out.println(auth(user, password, characters));


        } finally {
            if (mongodExecutable != null)
                mongodExecutable.stop();
        }

    }


    private static void seedDB(DBCollection dbCollection) {

        BasicDBObject rick = new BasicDBObject("_id", 1).append("name", "Rick").append("pwd", "Sanchez").append("address", "C-137");
        BasicDBObject morty = new BasicDBObject("_id", 2).append("name", "Morty").append("pwd", "Smith").append("address", "C-137");
        BasicDBObject beth = new BasicDBObject("_id", 3).append("name", "Beth").append("pwd", "Smith").append("address", "Replacement Dimension");
        BasicDBObject jerry = new BasicDBObject("_id", 4).append("name", "Jerry").append("pwd", "Smith").append("address", "Replacement Dimension");
        BasicDBObject summer = new BasicDBObject("_id", 5).append("name", "Summer").append("pwd", "Smith").append("address", "Replacement Dimension");
        BasicDBObject meeseeks = new BasicDBObject("_id", 6).append("name", "Mr.").append("pwd", " Meeseeks").append("address", "???");
        dbCollection.insert(rick);
        dbCollection.insert(morty);
        dbCollection.insert(beth);
        dbCollection.insert(jerry);
        dbCollection.insert(summer);
        dbCollection.insert(meeseeks);
    }


    private static String auth(String name, String pwd, DBCollection dbCollection) {
        String stringQuery = "{ 'name' : '" + name + "', 'pwd' : '" + pwd + "'}";
        System.out.println(stringQuery);

        DBObject databaseQuery = (DBObject) JSON.parse(stringQuery);

        DBCursor result = dbCollection.find(databaseQuery);

        if (result.size() == 0) {
            return "Authorization failed!";
        } else {
            String resultString = "Successfully authorized as ";
            resultString += result.one().get("name");
            resultString += " ";
            resultString += result.one().get("pwd");

            return resultString;
        }


    }


    private static String secureAuth(String name, String pwd, DBCollection dbCollection) throws UnknownHostException {


        BasicDBObject databaseQuery = new BasicDBObject("name", name);
        databaseQuery.append("pwd", pwd);

        DBCursor result = dbCollection.find(databaseQuery);

        if (result.size() == 0) {
            return "Authorization failed!";
        } else {
            String resultString = "Successfully authorized as ";
            resultString += result.one().get("name");
            resultString += " ";
            resultString += result.one().get("pwd");

            return resultString;
        }
    }
}